using CommandLine;
#pragma warning disable 8618

namespace RidersPS2ArchiveTool
{
    [Verb("scan", HelpText = "Search for specific DAT file information inside PS2 executable.")]
    internal class ScanOptions
    {
        [Option(Required = true, HelpText = "Full path to the PS2 executable (For US version, SLUS_213.31).")]
        public string File { get; private set; }

        [Option(Required = true, HelpText = "Name of the dat file, e.g. \"Snd.dat\". Case sensitive. Names start with capital and are lowercase. In some game versions they can start with a backslash, e.g. \"\\Snd.dat\".")]
        public string Dat { get; private set; }

        [Option("output", Required = true, HelpText = "Full path to the JSON file to output archive information to.")]
        public string OutputPath { get; private set; }

        [Option("allowduplicates", Default = false, Required = false, HelpText = "If true, exports all information tables. If false, exports only the first found one.")]
        public bool AllowDuplicates { get; private set; } = false;
    }

    [Verb("extract", HelpText = "Extract a DAT file using scan results from previous phase.")]
    internal class ExtractOptions
    {
        [Option(Required = true, HelpText = "Full path to the DAT file to be extracted (supports uncompressed files only!).")]
        public string File { get; private set; }

        [Option(Required = true, HelpText = "Full path to the JSON file storing details of the DAT file.")]
        public string JsonPath { get; private set; }

        [Option("output", Required = true, HelpText = "Full path to the folder to output extract the DAT file to.")]
        public string OutputFolder { get; private set; }

    }

    [Verb("pack", HelpText = "Create a modified DAT file with modified contents based on a Json specification.\n (Adding files is not supported)")]
    internal class PackOptions
    {
        [Option(Required = true, HelpText = "The folder with modified files to repack.")]
        public string SourceFolder { get; private set; }

        [Option(Required = true, HelpText = "Path to the JSON file generated by the scan command. Used to retain file order.")]
        public string SourceJson { get; private set; }

        [Option(Required = true, HelpText = "Path to the JSON file to save for the inject command for reimporting.")]
        public string JsonPath { get; private set; }

        [Option(Required = true, HelpText = "Path to the DAT file to replace in the game folder.")]
        public string DatPath { get; private set; }
    }

    [Verb("inject", HelpText = "Inject new DAT file information into PS2 executable.")]
    internal class InjectOptions
    {
        [Option(Required = true, HelpText = "Full path to the PS2 executable (For US version, SLUS_213.31). The tool overwrites the file.")]
        public string File { get; private set; }

        [Option(Required = true, HelpText = "Full path to the JSON file storing details of the DAT file that was generated by the pack command.")]
        public string JsonPath { get; private set; }

        [Option(Required = true, HelpText = "Name of the dat file to overwrite with custom contents, e.g. \"Snd.dat\". Case sensitive. Names start with capital and are lowercase. In some game versions they can start with a backslash, e.g. \"\\Snd.dat\".")]
        public string Dat { get; private set; }
    }

    [Verb("verify", HelpText = "Checks a JSON file against a directory and reports missing files.")]
    internal class VerifyOptions
    {
        [Option(Required = true, HelpText = "Full path to the JSON file extracted using the scan command.")]
        public string JsonPath { get; private set; }

        [Option(Required = true, HelpText = "The folder to check whether all the files are present.")]
        public string SourceFolder { get; private set; }
    }
}
